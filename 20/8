//Write the simulation program to implement demand paging and show the page scheduling and total number of page faults for the following given page reference string. Give input n =3 as the number of memory frames. 
Reference String : 12,15,12,18,6,8,11,12,19,12,6,8,12,15,19,8 
Implement OPT //



#include <stdio.h>
#include <stdlib.h>

#define MAX_PAGES 15 // Maximum number of pages in the reference string

// Function to find the index of the page to replace
int findOptimalPage(int pages[], int n, int memory[], int frames, int currentIndex) {
    int farthestIndex = -1;
    int pageToReplace = -1;

    for (int i = 0; i < frames; i++) {
        int j;
        for (j = currentIndex; j < n; j++) {
            if (memory[i] == pages[j]) {
                if (j > farthestIndex) {
                    farthestIndex = j;
                    pageToReplace = i;
                }
                break;
            }
        }

        // If the page is not found in future references, replace it
        if (j == n) {
            return i; // Return this page index for replacement
        }
    }

    // If all pages are found in future references, return the one to replace
    return (pageToReplace != -1) ? pageToReplace : 0;
}

// Function to implement OPT page replacement
void optPageReplacement(int pages[], int n, int frames) {
    int memory[frames]; // Array to store pages in memory
    int pageFaults = 0; // Count of page faults

    // Initialize memory frames to -1
    for (int i = 0; i < frames; i++) {
        memory[i] = -1;
    }

    printf("Reference String: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", pages[i]);
    }
    printf("\n");

    printf("Page Frames: %d\n", frames);
    printf("OPT Page Replacement:\n");
    printf("-------------------------------------------------\n");
    printf("| Time | Page | Memory Frame                 |\n");
    printf("-------------------------------------------------\n");

    for (int i = 0; i < n; i++) {
        int currentPage = pages[i];
        int found = 0; // Flag to check if page is found in memory

        // Check if the page is already in memory
        for (int j = 0; j < frames; j++) {
            if (memory[j] == currentPage) {
                found = 1;
                break;
            }
        }

        // If page is not found in memory, it is a page fault
        if (!found) {
            pageFaults++;

            // If memory is not full, add the new page
            int emptyIndex = -1;
            for (int j = 0; j < frames; j++) {
                if (memory[j] == -1) {
                    emptyIndex = j;
                    break;
                }
            }

            if (emptyIndex != -1) {
                memory[emptyIndex] = currentPage; // Load new page into memory
            } else {
                // Find the page to replace using OPT
                int replaceIndex = findOptimalPage(pages, n, memory, frames, i + 1);
                memory[replaceIndex] = currentPage; // Replace the page
            }

            // Display current memory state
            printf("| %4d | %4d |", i + 1, currentPage);
            for (int j = 0; j < frames; j++) {
                if (memory[j] != -1) {
                    printf(" %d", memory[j]);
                } else {
                    printf(" -");
                }
            }
            printf(" |\n");
        } else {
            // If page is found, just display the current memory state
            printf("| %4d | %4d |", i + 1, currentPage);
            for (int j = 0; j < frames; j++) {
                if (memory[j] != -1) {
                    printf(" %d", memory[j]);
                } else {
                    printf(" -");
                }
            }
            printf(" |\n");
        }
    }

    printf("-------------------------------------------------\n");
    printf("Total Page Faults: %d\n", pageFaults);
}

int main() {
    int frames = 3; // Fixed number of memory frames
    int pages[] = {12, 15, 12, 18, 6, 8, 11, 12, 19, 12, 6, 8, 12, 15, 19, 8};
    int n = sizeof(pages) / sizeof(pages[0]); // Number of pages in the reference string

    optPageReplacement(pages, n, frames);

    return 0;
}