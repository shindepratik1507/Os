5/6


//Write the simulation program to implement demand paging and show the page scheduling and total number of page faults for the following given page reference string. Give input n as the number of memory frames. 
Reference String :3, 4, 5, 6, 3, 4, 7, 3, 4, 5, 6, 7, 2, 4, 6 Implement FIFO //




#include <stdio.h>

#define MAX_PAGES 15 // Maximum number of pages in the reference string

// Function to implement FIFO page replacement
void fifoPageReplacement(int pages[], int n, int frames) {
    int memory[frames]; // Array to store pages in memory
    int pageFaults = 0; // Count of page faults
    int pageIndex = 0;  // Index for FIFO replacement

    // Initialize memory frames to -1
    for (int i = 0; i < frames; i++) {
        memory[i] = -1;
    }

    printf("Reference String: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", pages[i]);
    }
    printf("\n");

    printf("Page Frames: %d\n", frames);
    printf("FIFO Page Replacement:\n");
    printf("-------------------------------------------------\n");
    printf("| Time | Page | Memory Frame                 |\n");
    printf("-------------------------------------------------\n");

    for (int i = 0; i < n; i++) {
        int currentPage = pages[i];
        int found = 0; // Flag to check if page is found in memory

        // Check if the page is already in memory
        for (int j = 0; j < frames; j++) {
            if (memory[j] == currentPage) {
                found = 1;
                break;
            }
        }

        // If page is not found in memory, it is a page fault
        if (!found) {
            pageFaults++;

            // If memory is full, replace the oldest page
            if (memory[pageIndex] != -1) {
                printf("| %4d | %4d |", i + 1, currentPage);
                printf(" %d", memory[pageIndex]);
            } else {
                printf("| %4d | %4d |", i + 1, currentPage);
                printf("  -");
            }

            memory[pageIndex] = currentPage; // Load new page into memory
            pageIndex = (pageIndex + 1) % frames; // Update page index for FIFO replacement

            // Display current memory state
            for (int j = 0; j < frames; j++) {
                if (memory[j] != -1) {
                    printf(" %d", memory[j]);
                } else {
                    printf(" -");
                }
            }
            printf(" |\n");
        } else {
            // If page is found, just display the current memory state
            printf("| %4d | %4d |", i + 1, currentPage);
            for (int j = 0; j < frames; j++) {
                if (memory[j] != -1) {
                    printf(" %d", memory[j]);
                } else {
                    printf(" -");
                }
            }
            printf(" |\n");
        }
    }

    printf("-------------------------------------------------\n");
    printf("Total Page Faults: %d\n", pageFaults);
}

int main() {
    int frames;
    int pages[] = {3, 4, 5, 6, 3, 4, 7, 3, 4, 5, 6, 7, 2, 4, 6};
    int n = sizeof(pages) / sizeof(pages[0]); // Number of pages in the reference string

    printf("Enter the number of memory frames: ");
    scanf("%d", &frames);

    fifoPageReplacement(pages, n, frames);

    return 0;
}