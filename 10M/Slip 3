//Creating a child process using the command exec(). Note down process ids of the parent and the child processes, check whether the control is given back to the parent after the child process terminates.//



#include <stdio.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

int main() {
    pid_t pid = fork();  // Create a child process

    if (pid < 0) {
        // If pid < 0, fork() failed
        perror("Fork failed");
        return 1;
    } else if (pid == 0) {
        // Child process
        printf("Child Process ID: %d\n", getpid());
        printf("Executing 'ls' command in Child Process...\n");
        
        // Replace the child process with the 'ls' command
        execl("/bin/ls", "ls", NULL);

        // If execl() fails
        perror("execl() failed");
        return 1;
    } else {
        // Parent process
        printf("Parent Process ID: %d\n", getpid());

        // Wait for the child process to complete
        wait(NULL);
        printf("Child process has terminated. Control is back to the parent.\n");
    }

    return 0;
}